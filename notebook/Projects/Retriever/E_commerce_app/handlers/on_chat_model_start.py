from typing import Any, Dict, List
from uuid import UUID

from langchain.callbacks.base import BaseCallbackHandler
from langchain_core.messages import BaseMessage
from pyboxen import boxen
from rich.console import Console
from typeguard import typechecked


@typechecked
def bprint(*args, **kwargs) -> None:
    """This is used to print the PyBoxen string."""
    print(boxen(*args, **kwargs, padding=1))  # noqa: T201


class Colors:
    aqua: str = "#00FFFF"
    blue: str = "#0000FF"
    darkorchid: str = "#9932CC"
    darkred: str = "#8B0000"
    darkslateblue: str = "#483D8B"
    gold: str = "#FFD700"
    goldenrod: str = "#DAA520"
    gray: str = "#808080"
    green: str = "#008000"
    pink: str = "#FFC0CB"
    red: str = "#FF0000"
    yellow: str = "#FFFF00"


console = Console()
color = Colors()


# Autogenerated and modified
class ChatModelStartHandler(BaseCallbackHandler):
    @typechecked
    def on_chat_model_start(
        self,
        serialized: Dict[str, Any],
        messages: List[List[BaseMessage]],
        *,
        run_id: UUID,
        parent_run_id: UUID | None = None,
        tags: List[str] | None = None,
        metadata: Dict[str, Any] | None = None,
        **kwargs: Any,
    ) -> Any:
        console.print("======== Sending Messages To The LLM ========", style=color.darkorchid)
        for message in messages[0]:
            if message.type == "system":
                bprint(message.content, title=message.type.upper(), color=color.blue)

            elif message.type == "human":
                bprint(message.content, title=message.type.upper(), color=color.gold)

            elif message.type == "ai":
                # AI with function call
                if message.additional_kwargs.get("function_call", None):
                    tool: dict[str, Any] = message.additional_kwargs.get("function_call", None)
                    bprint(
                        f"Running tool {tool.get('name')} with args: {tool.get('arguments')}",
                        title=message.type.upper(),
                        color=color.aqua,
                    )
                else:  # AI response
                    title: str = f"{message.type.upper()}_response"
                    bprint(message.content, title=title, color=color.pink)

            elif message.type == "function":  # Output of func calls
                bprint(message.content, title=message.type.upper(), color=color.darkorchid)

            else:  # Any new future message from langchain
                bprint(message.content, title=message.type.upper(), color=color.darkred)
